RFID		[XONG]
	RST-E14			CS-E15		SPI2(MOSI-C3		MISO-C2		SCK-B10)

MOTOR		[XONG]
	4 Chân: B: 11 - 12- 13- 14 
	//TIM9-E5-CH1(TRAI)		TIM9-E6-CH2(PHAI)	

LINE
	5 Chân:

HCSR04:		[XONG]
	TIMER2
	A0.CH1-ECHO		A2.CH3-TRIGER
	
5-DOF:				[XONG]
	TIMER3: P5.CH2	
	TIMER4:	P6.CH1	P7.CH2	P8.CH3	P9.CH4

Usart:			[XONG]
	Usart3 	C10-TX		C11-RX

1:
	180  : banh trai
	0: banh phai
2:
	90  : huong xuong duoi
	50: huong len tren
3:
	100  : huong len tren
	20: huong xuong duoi
4:
	180  : quay sang banh phai
	0: quay sang banh trai
5:
	180  : gap do vat
	0: nha do vat
	
	
	
sprintf(tempbd, "%s", cJSON_GetObjectItem(quan_ly_data,"Start")->valuestring);
sprintf(tempkt, "%s", cJSON_GetObjectItem(quan_ly_data,"End")->valuestring);
while(1){
	if(strcmp("Tram 1", tempbd) == 0){
		sprintf(batdau, "%s", R7);
		dem = 70;
		break;
	}
	else if(strcmp("Tram 2", tempbd) == 0){
		sprintf(batdau, "%s", R8);
		dem = 80;
		break;
	}
	else if(strcmp("Tram 3", tempbd) == 0){
		sprintf(batdau, "%s", R9);
		dem = 90;
		break;
	}
	else if(strcmp("Tram 4", tempbd) == 0){
		sprintf(batdau, "%s", R10);
		dem = 100;
		break;
	}
}

while(1){
	if(strcmp("Tram 1", tempkt) == 0){
		sprintf(ketthuc, "%s", R7);
		dem = dem + 7;
		break;
	}
	else if(strcmp("Tram 2", tempkt) == 0){
		sprintf(ketthuc, "%s", R8);
		dem = dem + 8;
		break;
	}
	else if(strcmp("Tram 3", tempkt) == 0){
		sprintf(ketthuc, "%s", R9);
		dem = dem + 9;
		break;
	}
	else if(strcmp("Tram 4", tempkt) == 0){
		sprintf(ketthuc, "%s", R10);
		dem = dem + 10;
		break;
	}
}

if(dem==78||dem==87||dem==109) bd_kt = dem;
else if(dem==100) bd_kt = 910;
else if(dem==79||dem==89||dem==80||dem==90) bd_kt = 7089010;
else if(dem==97||dem==107||dem==98||dem==108) bd_kt = 9010708;
	
	
//
for(i = 20; i <= 120; i++){
	TM_SERVO_SetDegrees(&Servo[2], i);//3 
	delay(20);
}
for(i = 100; i <= 180; i++){
	TM_SERVO_SetDegrees(&Servo[0], i);//3 
	delay(20);
}
for(i = 10; i <= 20; i++){
	TM_SERVO_SetDegrees(&Servo[3], i);//3 
	delay(20);
}
for(i = 110; i <= 160; i++){
	TM_SERVO_SetDegrees(&Servo[1], i);//3
	delay(20);
}
for(i = 30; i <= 130; i++){
	TM_SERVO_SetDegrees(&Servo[4], i);//5
	delay(20);
}
delay(500);
for(i = 130; i >= 30; i--){
	TM_SERVO_SetDegrees(&Servo[4], i);//5
	delay(20);
}
for(i = 160; i >= 110; i--){
	TM_SERVO_SetDegrees(&Servo[1], i);//3
	delay(20);
}
for(i = 20; i >= 10; i--){
	TM_SERVO_SetDegrees(&Servo[3], i);//3 
	delay(20);
}
for(i = 180; i >= 100; i--){
	TM_SERVO_SetDegrees(&Servo[0], i);//3 
	delay(20);
}
for(i = 120; i >= 20; i--){
	TM_SERVO_SetDegrees(&Servo[2], i);//3 
	delay(20);
}
delay(500);


for(i = 20; i <= 120; i++){
	TM_SERVO_SetDegrees(&Servo[2], i);//3 
	delay(20);
}
for(i = 100; i > 0; i--){
	TM_SERVO_SetDegrees(&Servo[0], i);//3 
	delay(20);
}
for(i = 10; i > 0; i--){
	TM_SERVO_SetDegrees(&Servo[3], i);//3 
	delay(20);
}
for(i = 110; i <= 160; i++){
	TM_SERVO_SetDegrees(&Servo[1], i);//3
	delay(20);
}
for(i = 30; i <= 130; i++){
	TM_SERVO_SetDegrees(&Servo[4], i);//5
	delay(20);
}
delay(500);
for(i = 130; i >= 30; i--){
	TM_SERVO_SetDegrees(&Servo[4], i);//5
	delay(20);
}
for(i = 160; i >= 110; i--){
	TM_SERVO_SetDegrees(&Servo[1], i);//3
	delay(20);
}
for(i = 0; i <= 10; i++){
	TM_SERVO_SetDegrees(&Servo[3], i);//3 
	delay(20);
}
for(i = 0; i <= 100; i++){
	TM_SERVO_SetDegrees(&Servo[0], i);//3 
	delay(20);
}
for(i = 120; i >= 20; i--){
	TM_SERVO_SetDegrees(&Servo[2], i);//3 
	delay(20);
}
delay(500);
//
	
Lay hang ben trai
	TM_SERVO_SetDegrees(&Servo[0], 180);//1
	TM_SERVO_SetDegrees(&Servo[1], 160);//2
	TM_SERVO_SetDegrees(&Servo[2], 120);//3
	TM_SERVO_SetDegrees(&Servo[3], 20);//4
	TM_SERVO_SetDegrees(&Servo[4], 130);//5	

Lay hang ben phai
	TM_SERVO_SetDegrees(&Servo[0], 0);//1
	TM_SERVO_SetDegrees(&Servo[1], 160);//2
	TM_SERVO_SetDegrees(&Servo[2], 120);//3
	TM_SERVO_SetDegrees(&Servo[3], 0);//4
	TM_SERVO_SetDegrees(&Servo[4], 30);//5
Ve vi tri cho
	TM_SERVO_SetDegrees(&Servo[0], 100);//1
	TM_SERVO_SetDegrees(&Servo[1], 120);//2
	TM_SERVO_SetDegrees(&Servo[2], 20);//3
	TM_SERVO_SetDegrees(&Servo[3], 10);//4
	TM_SERVO_SetDegrees(&Servo[4], 30);//5

	


//tcrt_arr
//buffer
//dis
//ngat_usart
//Actual
//Error
//Target
//ErrorChange
//ErrorOld
//ErrorSlope
//ErrorArea
//PWM_Value_old
//PWM_Value
//left
//right



//max_speed
//float kp = 1;
//float kd = 4.5;
//float ki = 0.0000005f;
//status
//g_ucTempbuf
//flag_loop
//buff_index
//buff
//receive


uint8_t CardID[5];
signed int out_line = 0;
uint16_t TB_ADC[11] = {0};
__IO uint16_t RxData[11];
__IO uint16_t RxData1[11];
uint16_t TB[11] = {600, 350, 600, 550, 280, 1600, 2800, 2660, 2500, 1560, 2100};
uint16_t Temp_ADC_t[11] = {0};
uint16_t Temp_ADC_d[11] = {0};
uint16_t Temp_ADC[11] = {0};
//									0		1			2			3		  4			5			6			7			8		 9		10		
//uint16_t TB[11] = {1090, 550, 750, 970, 1110, 1960, 3520, 1570, 1980, 1080, 1390};
uint32_t data_line = 0;
char minh_json[200];
char temp_json[200];



//	
//	gpio.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7;
//	gpio.GPIO_Mode = GPIO_Mode_OUT;
//	gpio.GPIO_OType = GPIO_OType_PP;
//	gpio.GPIO_PuPd = GPIO_PuPd_UP;
//	gpio.GPIO_Speed = GPIO_High_Speed;
//	GPIO_Init(GPIOA, &gpio);
//	


//			//xoay phai
//			GPIOB->ODR |= 1<<14;
//			GPIOB->ODR &= ~(1<<13);
//			GPIOB->ODR |= 1<<11;
//			GPIOB->ODR &= ~(1<<12);
//			TIM10->CCR1 = 100;
//			TIM11->CCR1 = 100;
//			delay(4500);



//			//xoay trai
//			GPIOB->ODR |= 1<<13;
//			GPIOB->ODR &= ~(1<<14);
//			GPIOB->ODR |= 1<<12;
//			GPIOB->ODR &= ~(1<<11);
//			TIM10->CCR1 = 100;
//			TIM11->CCR1 = 100;
//			delay(1750);



//			//lui
//			GPIOB->ODR |= 1<<13;
//			GPIOB->ODR &= ~(1<<14);
//			GPIOB->ODR |= 1<<11;
//			GPIOB->ODR &= ~(1<<12);
//			delay(1000);
//			TIM10->CCR1 = 0;
//			TIM11->CCR1 = 0;
//			delay(3000);



//			//thang
//			GPIOB->ODR |= 1<<14;
//			GPIOB->ODR &= ~(1<<13);
//			GPIOB->ODR |= 1<<12;
//			GPIOB->ODR &= ~(1<<11);
//			TIM10->CCR1 = 100;
//			TIM11->CCR1 = 100;
//			delay(1000);


//KHONG DUNG
void ADC_READ(void);
void filter(void);
long MAP(long value, long in_min, long in_max, long out_min, long out_max);
void Line_config(void);
void XuLyDataLine(void);
void Lay_Mau(void);
void Line_Disable(void);
void Line_Start(void);
void Line_Enable(void);
void Line_Enable(void);
void DMA_ADC_Init(void);
void Read64Block( void);
void ROBOT_Init(void);

void ROBOT_Init(void){
	GPIO_InitTypeDef gpioInit;
	TIM_TimeBaseInitTypeDef timInit;
	TIM_OCInitTypeDef pwmInit;
	
//	/*TIM10 - PWM
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
	timInit.TIM_Prescaler = 3360 - 1;
	timInit.TIM_Period = 1000 - 1;
	TIM_TimeBaseInit(TIM10, &timInit);
	
	pwmInit.TIM_OCMode = TIM_OCMode_PWM1;
	pwmInit.TIM_OCPolarity = TIM_OCPolarity_High;
	pwmInit.TIM_Pulse = 10;
	pwmInit.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC1Init(TIM10, &pwmInit);
	
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	
	gpioInit.GPIO_Mode = GPIO_Mode_AF;
	gpioInit.GPIO_OType = GPIO_OType_PP;
	gpioInit.GPIO_Pin = GPIO_Pin_8;
	gpioInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
	gpioInit.GPIO_Speed = GPIO_High_Speed;
	GPIO_Init(GPIOB, &gpioInit);
	
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM10);
	
	TIM_Cmd(TIM10, ENABLE);
	
	

	
	/*TIM8-PWM*/
//	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
//	timInit.TIM_Prescaler = 168 - 1;
//	timInit.TIM_Period = 10 - 1;
//	TIM_TimeBaseInit(TIM8, &timInit);
//	
//	pwmInit.TIM_OCMode = TIM_OCMode_PWM1;
//	pwmInit.TIM_OCPolarity = TIM_OCPolarity_High;
//	pwmInit.TIM_Pulse = 2;
//	pwmInit.TIM_OutputState = TIM_OutputState_Enable;
//	TIM_OC1Init(TIM8, &pwmInit);
//	
//	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
//	
//	gpioInit.GPIO_Mode = GPIO_Mode_AF;
//	gpioInit.GPIO_OType = GPIO_OType_PP;
//	gpioInit.GPIO_Pin = GPIO_Pin_6;
//	gpioInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
//	gpioInit.GPIO_Speed = GPIO_High_Speed;
//	GPIO_Init(GPIOC, &gpioInit);
//	
//	GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);
//	
//	TIM_Cmd(TIM8, ENABLE);
//	TIM_CtrlPWMOutputs(TIM8, ENABLE);
}


void PWMInit(void){
	uint16_t PrescalerValue = (uint16_t) 84;
	GPIO_InitTypeDef            GPIO_InitStructure;
	TIM_TimeBaseInitTypeDef     TIM_TimeBaseStructure;
	TIM_OCInitTypeDef           TIM_OCInitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Pin     = GPIO_Pin_6 | GPIO_Pin_7;
	GPIO_InitStructure.GPIO_Mode    = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed   = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType   = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd    = GPIO_PuPd_UP;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4);

	/*
	* 84M / TIM_Prescaler = 1M
	* 1M / TIM_ClockDivision = 1M
	* 1M / (TIM_Period + 1) = 50Hz (20ms)
	* TIM_Pulse = 500(us) ~ 2500(us)
	*/


	TIM_TimeBaseStructure.TIM_Period        = 19999;
	TIM_TimeBaseStructure.TIM_Prescaler     = PrescalerValue;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;//0;
	TIM_TimeBaseStructure.TIM_CounterMode   = TIM_CounterMode_Up;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	TIM_OCInitStructure.TIM_OCMode      = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse       = 0; 
	TIM_OCInitStructure.TIM_OCPolarity  = TIM_OCPolarity_High;

	TIM_OC1Init(TIM4, &TIM_OCInitStructure);
	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);

	TIM_OC2Init(TIM4, &TIM_OCInitStructure);
	TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);

	TIM_ARRPreloadConfig(TIM4, ENABLE);

	TIM_Cmd(TIM4, ENABLE);
}


void HuongRaHome(void);
void HuongvaoHome(void);
void HuongAUTO(void);
//KHONG DUNG




void HuongRaHome(){

//	if(bd_kt==78){	//batdau==7&&ketthuc==8
//		huong0 = 2;
//		//gap 1R
//		if(strcmp(R1, buffer)==0){
//			//Phai
//			TIM11->CCR1 = 70;
//			TIM10->CCR1 = 20;
//			delay(2500);
//		}
//	}
//	if(bd_kt==87){	//batdau==8&&ketthuc==7
//		huong0 = 1;
//		//gap 2L
//		if(strcmp(R2, buffer)==0){
//			//Trai
//			TIM10->CCR1 = 70;
//			TIM11->CCR1 = 20;
//			delay(2500);
//		}
//	}
//	if(bd_kt==910){	//batdau==9&&ketthuc==10
//		huong0 = 1;
//		//gap 1L
//		if(strcmp(R1, buffer)==0){
//			//Trai
//			TIM10->CCR1 = 70;
//			TIM11->CCR1 = 20;
//			delay(2500);
//		}
//	}
//	if(bd_kt==109){	//batdau==10&&ketthuc==9
//		huong0 = 2;
//		//gap 2R
//		if(strcmp(R2, buffer)==0){
//			//Phai
//			TIM11->CCR1 = 70;
//			TIM10->CCR1 = 20;
//			delay(2500);
//		}
//		//DUNG TAI 10, DUNG TAI 9
//	}
//	if(bd_kt==7089010){	//(batdau==7||batdau==8) && (ketthuc==9||ketthuc==10)
//		huong0 = 1;
//		//gap 2L
//		if(strcmp(R2, buffer)==0){
//			//Trai
//			TIM10->CCR1 = 70;
//			TIM11->CCR1 = 20;
//			delay(2500);
//		}
//	}
//	if(bd_kt==9010708){	//(batdau==9||batdau==10) && (ketthuc==7||ketthuc==8)
//		huong0 = 2;
//		//gap 2R
//		if(strcmp(R2, buffer)==0){
//			//Phai
//			TIM11->CCR1 = 70;
//			TIM10->CCR1 = 20;
//			delay(2500);
//		}
//	}
	//DUNG TAI batdau lay hang
//	if(strcmp(batdau, buffer)==0){
//		TIM11->CCR1 = 0;
//		TIM10->CCR1 = 0;
//		delay(3000);
//		TIM11->CCR1 = 130;
//		TIM10->CCR1 = 130;
//		bdRaKhoiHome=2;
//	}
	//DUNG TAI ketthuc tra hang
//	if(strcmp(ketthuc, buffer)==0){
//		TIM11->CCR1 = 0;
//		TIM10->CCR1 = 0;
//		stop=1;
//	}
	
	if(bdRaKhoiHome==0){
		if(huong0==1){
			//thang
			GPIOB->ODR |= 1<<14;
			GPIOB->ODR &= ~(1<<13);
			GPIOB->ODR |= 1<<12;
			GPIOB->ODR &= ~(1<<11);
			TIM10->CCR1 = 100;
			TIM11->CCR1 = 100;
			delay(1000);
			//xoay phai
			GPIOB->ODR |= 1<<14;
			GPIOB->ODR &= ~(1<<13);
			GPIOB->ODR |= 1<<11;
			GPIOB->ODR &= ~(1<<12);
			TIM10->CCR1 = 100;
			TIM11->CCR1 = 100;
			delay(1750);
		}
		else if(huong0==2){
			//thang
			GPIOB->ODR |= 1<<14;
			GPIOB->ODR &= ~(1<<13);
			GPIOB->ODR |= 1<<12;
			GPIOB->ODR &= ~(1<<11);
			TIM10->CCR1 = 100;
			TIM11->CCR1 = 100;
			delay(1000);
			//xoay trai
			GPIOB->ODR |= 1<<13;
			GPIOB->ODR &= ~(1<<14);
			GPIOB->ODR |= 1<<12;
			GPIOB->ODR &= ~(1<<11);
			TIM10->CCR1 = 100;
			TIM11->CCR1 = 100;
			delay(1750);
			TIM10->CCR1 = 0;
			TIM11->CCR1 = 0;
			delay(3000);
		}
		bdRaKhoiHome = 1;
	}

}

void HuongAUTO(){
	//DUNG TAI batdau lay hang
//	if(strcmp(batdau, buffer)==0){
//		TIM11->CCR1 = 0;
//		TIM10->CCR1 = 0;
//		delay(3000);
//		TIM11->CCR1 = 130;
//		TIM10->CCR1 = 130;
//		delay(2000);
//	}
	//DUNG TAI ketthuc tra hang
//	if(strcmp(ketthuc, buffer)==0){
//		TIM11->CCR1 = 0;
//		TIM10->CCR1 = 0;
//		delay(3000);
//		TIM11->CCR1 = 130;
//		TIM10->CCR1 = 130;
//		delay(2000);
//		stop=1;
//	}
	if(bd_kt==910||bd_kt==109){	//(batdau==9||batdau==10)&& (ketthuc==9||ketthuc==10)
		if(huong0==2){
			//2R
//			if(strcmp(R2, buffer)==0||strcmp(R5, buffer)==0){
//				//Phai
//				TIM11->CCR1 = 70;
//				TIM10->CCR1 = 20;
//				delay(2500);
//			}
			//5R
		}
		if(huong0==1){
			//1L
//			if(strcmp(R1, buffer)==0||strcmp(R6, buffer)==0){
//				//Trai
//				TIM10->CCR1 = 70;
//				TIM11->CCR1 = 20;
//				delay(2500);
//			}
			//6L
		}
	}
	if(bd_kt==78||bd_kt==87){	//(batdau==7||batdau==8)&& (ketthuc==7||ketthuc==8)
		if(huong0==2){
			//4R
//			if(strcmp(R4, buffer)==0||strcmp(R1, buffer)==0){
//				//Phai
//				TIM11->CCR1 = 70;
//				TIM10->CCR1 = 20;
//				delay(2500);
//			}
			//1R
		}
		if(huong0==1){
			//3L
//			if(strcmp(R2, buffer)==0||strcmp(R3, buffer)==0){
//				//Trai
//				TIM10->CCR1 = 70;
//				TIM11->CCR1 = 20;
//				delay(2500);
//			}
			//2L
		}
	}
	if(bd_kt==7089010){	//(batdau==7||batdau==8) && (ketthuc==9||ketthuc==10)
		//4F
		//5F
	}
	if(bd_kt==9010708){	//(batdau==9||batdau==10) && (ketthuc==7||ketthuc==8)
		//3F
		//6F
	}
}

void HuongvaoHome(){
//	if(huong0==1){
//		if(strcmp(hientai,R7)==0||strcmp(hientai,R8)==0){	//hientai==7||hientai==8
			//gap 3L
//			if(strcmp(R3, buffer)==0){
//				//Trai
//				TIM10->CCR1 = 70;
//				TIM11->CCR1 = 20;
//				delay(2500);
//			}
//		}
//		if(strcmp(hientai,R9)==0||strcmp(hientai,R10)==0){	//hientai==9||hientai==10
			//gap 5R
//			if(strcmp(R5, buffer)==0){
//				//Phai
//				TIM11->CCR1 = 70;
//				TIM10->CCR1 = 20;
//				delay(2500);
//			}
//		}
		//gap 0 dung
//		if(strcmp(R0, buffer)==0){
//			TIM11->CCR1 = 0;
//			TIM10->CCR1 = 0;
//			stop=1;
//			huong0 = 0;
//		}
//	}
//	if(huong0==2){
//		if(strcmp(hientai,R7)==0||strcmp(hientai,R8)==0){	//hientai==7||hientai==8
			//gap 4R
//			if(strcmp(R4, buffer)==0){
//				//Phai
//				TIM11->CCR1 = 70;
//				TIM10->CCR1 = 20;
//				delay(2500);
//			}
//		}
//		if(strcmp(hientai,R9)==0||strcmp(hientai,R10)==0){	//hientai==9||hientai==10
			//gap 6L
//			if(strcmp(R6, buffer)==0){
//				//Trai
//				TIM10->CCR1 = 70;
//				TIM11->CCR1 = 20;
//				delay(2500);
//			}
//		}
		//gap 0 dung
//		if(strcmp(R0, buffer)==0){
//			TIM11->CCR1 = 0;
//			TIM10->CCR1 = 0;
//			stop=1;
//		}
//	}
}





//	Line_config();
//	Line_Enable();
//	DMA_ADC_Init();
//	Line_Start();
//Lay_Mau();



//KHONG DUNG
void Read64Block( void){
 uint8_t k=0,p=0;
 uint8_t  readdata[16];
 uint8_t serNum[5];
	  for(k=0;k<64;k++)			
	    {		
				 status = MFRC522_Request(PICC_REQALL, g_ucTempbuf);
         if (status != MI_OK) continue;
/*---------------------------------------------------*/				
         status = MFRC522_Anticoll(serNum);
         if (status != MI_OK) continue;
/*----------------------------------------------------*/
         status = MFRC522_Select(serNum);
         if (status != MI_OK) continue;
/*----------------------------------------------------*/
         status = MFRC522_AuthState(PICC_AUTHENT1A, k, defaultKeyA,serNum);
         if (status != MI_OK) continue;
/*----------------------------------------------------*/	
//         printf("block %d\r\n", k);	
				 status = MFRC522_Read(k, readdata);
                if (status == MI_OK)
                {
//									printf("hex= ");
                  for(p=0; p<16; p++)
                  {                  
//									printf("%x ",readdata[p]);
                  } 
									/*
//                  printf("\r\nsymbol= ");	    								
                   for(p=0; p<16; p++)
                  {                  
//										printf("%c",readdata[p]);
                  } 	
									*/
//                  printf("\r\n\r\n");									        
                  MFRC522_Halt();
              }
       }
//			printf("\n");

}


void DMA_ADC_Init(void){
	// Enable the DMA2 Clock
	RCC->AHB1ENR |= (1<<22);  // DMA2EN = 1
	// Select the Data Direction
	DMA2_Stream0->CR &= ~(3<<6);  // Peripheral to memory
		
	// Select Circular mode
	DMA2_Stream0->CR |= (1<<8);  // CIRC = 1
		
	// Enable Memory Address Increment
	DMA2_Stream0->CR |= (1<<10);  // MINC = 1;

	// Set the size for data 
	DMA2_Stream0->CR |= (1<<11)|(1<<13);  // PSIZE = 01, MSIZE = 01, 16 bit data
		
	// Select channel for the stream
	DMA2_Stream0->CR &= ~(7<<25);  // Channel 0 selected
	
	DMA2_Stream0->NDTR = 11;   // Set the size of the transfer
	
	DMA2_Stream0->PAR = (uint32_t ) &ADC1->DR;  // Source address is peripheral address
		
	DMA2_Stream0->M0AR = (uint32_t) RxData;  // Destination Address is memory address
		
	// Enable the DMA Stream
	DMA2_Stream0->CR |= (1<<0);  // EN =1	
}
void Line_Enable(void){
		uint32_t delay = 10000;
	ADC1->CR2 |= (1<<0);	//ADON = 1 enable ADC1

	while(delay--);
}
void Line_Start(void){
	ADC1->SR = 0;        // clear the status register
	ADC1->CR2 |= (1<<30);  // start the conversion
}
void Line_Disable(void){
	ADC1->CR2 &= ~(1<<0);
}

void Lay_Mau(void){
	int i, j;
	int t,d=0;
	while(d==0){
		if((GPIOE->IDR&(1<<3)) == 0){
			while((GPIOE->IDR&(1<<3)) == 0){}
			so++;
			for(j = 0; j < 15; j++){
				for(i = 0; i < 11; i++){
					Temp_ADC_d[i] += RxData[i];
				}
			}
			d=1;
		}
	}
	while(t==0){
		if((GPIOE->IDR&(1<<4)) == 0){
			while((GPIOE->IDR&(1<<4)) == 0){}
			so++;
			for(j = 0; j < 15; j++){
				for(i = 0; i < 11; i++){
					Temp_ADC_t[i] += RxData[i];
				}
			}
			t=1;
		}
	}
	delay(2000);
	for(i = 0; i < 11; i++){
		TB[i] = ((Temp_ADC_d[i]/15)+(Temp_ADC_t[i]/15))/2;
	}
}




void XuLyDataLine(void){
	int i,j;
//	filter();
	for(j = 0; j < 10; j++){
		for (i = 0; i < 11; i++) {
			if (RxData1[i] < TB[i]) TB_ADC[i] = 0;
			if (RxData1[i] >= TB[i]) TB_ADC[i] = 1;
		}
	}

  if((TB_ADC[4]==1&&TB_ADC[5]==1&&TB_ADC[6]==1&&TB_ADC[7]==1&&TB_ADC[8]==1&&TB_ADC[9]==1&&TB_ADC[10]==1)||(TB_ADC[0]==1&&TB_ADC[1]==1&&TB_ADC[2]==1&&TB_ADC[3]==1&&TB_ADC[4]==1&&TB_ADC[5]==1&&TB_ADC[6]==1&&TB_ADC[7]==1&&TB_ADC[8]==1&&TB_ADC[9]==1&&TB_ADC[10]==1)){
		
		TIM10->CCR1 = 80;
		TIM11->CCR1 = 80;
		delay(500);
	//Phai
		GPIOB->ODR |= 1<<14;
		GPIOB->ODR &= ~(1<<13);
		GPIOB->ODR |= 1<<11;
		GPIOB->ODR &= ~(1<<12);
		TIM10->CCR1 = 80;
		TIM11->CCR1 = 80;
		delay(1700);
			//Thang
		GPIOB->ODR |= 1<<14;
		GPIOB->ODR &= ~(1<<13);
		GPIOB->ODR |= 1<<12;
		GPIOB->ODR &= ~(1<<11);
	}
//	if((TB_ADC[0]==1&&TB_ADC[1]==1&&TB_ADC[2]==1&&TB_ADC[3]==1&&TB_ADC[4]==1&&TB_ADC[5]==1&&TB_ADC[6]==1)||(TB_ADC[0]==1&&TB_ADC[1]==1&&TB_ADC[2]==1&&TB_ADC[3]==1&&TB_ADC[4]==1&&TB_ADC[5]==1&&TB_ADC[6]==1&&TB_ADC[7]==1&&TB_ADC[8]==1&&TB_ADC[9]==1&&TB_ADC[10]==1)){
//		
//		TIM10->CCR1 = 80;
//		TIM11->CCR1 = 80;
//		delay(500);
//		//Trai
//		GPIOB->ODR |= 1<<13;
//		GPIOB->ODR &= ~(1<<14);
//		GPIOB->ODR |= 1<<12;
//		GPIOB->ODR &= ~(1<<11);
//		TIM10->CCR1 = 80;
//		TIM11->CCR1 = 80;
//		delay(1700);
//			//Thang
//		GPIOB->ODR |= 1<<14;
//		GPIOB->ODR &= ~(1<<13);
//		GPIOB->ODR |= 1<<12;
//		GPIOB->ODR &= ~(1<<11);
//	}
  else{
		data_line = TB_ADC[0] * 1000 + TB_ADC[1] * 900 + TB_ADC[2] * 800 + TB_ADC[3] * 700 + TB_ADC[4] * 600 + TB_ADC[5] * 500 + TB_ADC[6] * 400 + TB_ADC[7] * 300 + TB_ADC[8] * 200 + TB_ADC[9] * 100 + TB_ADC[10] * 0;
		if (data_line == 0 && TB_ADC[0] == 0 && TB_ADC[1] == 0 && TB_ADC[2] == 0 && TB_ADC[3] == 0 && TB_ADC[4] == 0 && TB_ADC[5] == 0 && TB_ADC[6] == 0 && TB_ADC[7] == 0 && TB_ADC[8] == 0 && TB_ADC[9] == 0 && TB_ADC[10] == 0) {
			if (out_line == 1) {
				TIM10->CCR1 = 130;
				TIM11->CCR1 = 0;
	//      analogWrite(dongcophai, 70);
	//      analogWrite(dongcotrai, 0);
			} else {
				TIM10->CCR1 = 0;
				TIM11->CCR1 = 130;
	//      analogWrite(dongcophai, 0);
	//      analogWrite(dongcotrai, 70);
			}
		}else{
			//Sua
			if((data_line==0&&TB_ADC[10]==1) || (data_line==100&&TB_ADC[10]==1&&TB_ADC[9]==1)){
					Actual = 0; out_line = -1;
				}
				if((data_line==300&&TB_ADC[9]==1&&TB_ADC[8]==1) || (data_line==300&&TB_ADC[10]==1&&TB_ADC[9]==1&&TB_ADC[8]==1) || (data_line==1000&&TB_ADC[9]==1&&TB_ADC[8]==1&&TB_ADC[7]==1&&TB_ADC[6]==1)){
					Actual = 100; out_line = -1;
				}
				if((data_line==500&&TB_ADC[8]==1&&TB_ADC[7]==1) || (data_line==600&&TB_ADC[9]==1&&TB_ADC[8]==1&&TB_ADC[7]==1)){
					Actual = 200; out_line = -1;
				}
				if((data_line==900&&TB_ADC[6]==1&&TB_ADC[5]==1) || (data_line==1400&&TB_ADC[8]==1&&TB_ADC[7]==1&&TB_ADC[6]==1&&TB_ADC[5]==1) || (data_line==700&&TB_ADC[7]==1&&TB_ADC[6]==1) || (data_line==900&&TB_ADC[8]==1&&TB_ADC[7]==1&&TB_ADC[6]==1)){
					Actual = 300; out_line = -1;
				}
				if((data_line==1200&&TB_ADC[7]==1&&TB_ADC[6]==1&&TB_ADC[5]==1) || (data_line==1800&&TB_ADC[7]==1&&TB_ADC[6]==1&&TB_ADC[5]==1&&TB_ADC[4]==1)){
					Actual = 400; out_line = -1;
				}
				if((data_line==1500&&TB_ADC[6]==1&&TB_ADC[5]==1&&TB_ADC[4]==1)){
					Actual = 500; out_line = -1;
				}
				if((data_line==1800&&TB_ADC[5]==1&&TB_ADC[4]==1&&TB_ADC[3]==1) || (data_line==2200&&TB_ADC[6]==1&&TB_ADC[5]==1&&TB_ADC[4]==1&&TB_ADC[3]==1)){
					Actual = 600; out_line = 1;
				}
				if((data_line==1100&&TB_ADC[5]==1&&TB_ADC[4]==1) || (data_line==2600&&TB_ADC[5]==1&&TB_ADC[4]==1&&TB_ADC[3]==1&&TB_ADC[2]==1) || (data_line==1300&&TB_ADC[4]==1&&TB_ADC[3]==1) || (data_line==2100&&TB_ADC[4]==1&&TB_ADC[3]==1&&TB_ADC[2]==1)){
					Actual = 700; out_line = 1;
				}
				if((data_line==1500&&TB_ADC[3]==1&&TB_ADC[2]==1) || (data_line==2400&&TB_ADC[3]==1&&TB_ADC[2]==1&&TB_ADC[1]==1)){
					Actual = 800; out_line = 1;
				}
				if((data_line==1700&&TB_ADC[2]==1&&TB_ADC[1]==1) || (data_line==2700&&TB_ADC[2]==1&&TB_ADC[1]==1&&TB_ADC[0]==1) || (data_line==3000&&TB_ADC[4]==1&&TB_ADC[3]==1&&TB_ADC[2]==1&&TB_ADC[1]==1)){
					Actual = 900; out_line = 1;
				}
				if((data_line==1000&&TB_ADC[0]==1) || (data_line==1900&&TB_ADC[1]==1&&TB_ADC[0]==1)){
					Actual = 1000; out_line = 1;
				}
		//		if((data_line==0&&TB_ADC[10]==1) || (data_line==100&&TB_ADC[10]==1&&TB_ADC[9]==1)){
		//			Actual = 0; out_line = -1;
		//		}
		//		if((data_line==300&&TB_ADC[9]==1&&TB_ADC[8]==1) || (data_line==300&&TB_ADC[10]==1&&TB_ADC[9]==1&&TB_ADC[8]==1)){
		//			Actual = 100; out_line = -1;
		//		}
		//		if((data_line==500&&TB_ADC[8]==1&&TB_ADC[7]==1) || (data_line==600&&TB_ADC[9]==1&&TB_ADC[8]==1&&TB_ADC[7]==1) || (data_line==1000&&TB_ADC[9]==1&&TB_ADC[8]==1&&TB_ADC[7]==1&&TB_ADC[6]==1)){
		//			Actual = 200; out_line = -1;
		//		}
		//		if((data_line==700&&TB_ADC[7]==1&&TB_ADC[6]==1) || (data_line==900&&TB_ADC[8]==1&&TB_ADC[7]==1&&TB_ADC[6]==1) || (data_line==1400&&TB_ADC[8]==1&&TB_ADC[7]==1&&TB_ADC[6]==1&&TB_ADC[5]==1)){
		//			Actual = 300; out_line = -1;
		//		}
		//		if((data_line==900&&TB_ADC[6]==1&&TB_ADC[5]==1) || (data_line==1200&&TB_ADC[7]==1&&TB_ADC[6]==1&&TB_ADC[5]==1) || (data_line==1800&&TB_ADC[7]==1&&TB_ADC[6]==1&&TB_ADC[5]==1&&TB_ADC[4]==1)){
		//			Actual = 400; out_line = -1;
		//		}
		//		if(data_line==1500&&TB_ADC[6]==1&&TB_ADC[5]==1&&TB_ADC[4]==1){
		//			Actual = 500; out_line = -1;
		//		}
		//		if((data_line==1100&&TB_ADC[5]==1&&TB_ADC[4]==1) || (data_line==1800&&TB_ADC[5]==1&&TB_ADC[4]==1&&TB_ADC[3]==1) || (data_line==2200&&TB_ADC[6]==1&&TB_ADC[5]==1&&TB_ADC[4]==1&&TB_ADC[3]==1)){
		//			Actual = 600; out_line = 1;
		//		}
		//		if((data_line==1300&&TB_ADC[4]==1&&TB_ADC[3]==1) || (data_line==2100&&TB_ADC[4]==1&&TB_ADC[3]==1&&TB_ADC[2]==1) || (data_line==2600&&TB_ADC[5]==1&&TB_ADC[4]==1&&TB_ADC[3]==1&&TB_ADC[2]==1)){
		//			Actual = 700; out_line = 1;
		//		}
		//		if((data_line==1500&&TB_ADC[3]==1&&TB_ADC[2]==1) || (data_line==2400&&TB_ADC[3]==1&&TB_ADC[2]==1&&TB_ADC[1]==1) || (data_line==3000&&TB_ADC[4]==1&&TB_ADC[3]==1&&TB_ADC[2]==1&&TB_ADC[1]==1)){
		//			Actual = 800; out_line = 1;
		//		}
		//		if((data_line==1700&&TB_ADC[2]==1&&TB_ADC[1]==1) || (data_line==2700&&TB_ADC[2]==1&&TB_ADC[1]==1&&TB_ADC[0]==1)){
		//			Actual = 900; out_line = 1;
		//		}
		//		if((data_line==1000&&TB_ADC[0]==1) || (data_line==1900&&TB_ADC[1]==1&&TB_ADC[0]==1)){
		//			Actual = 1000; out_line = 1;
		//		}
		///
		//		if ((data_line == 0 && TB_ADC[10] == 1)) {
		//      Actual = 0; out_line = -1;
		//    } else if ((data_line == 300 && TB_ADC[10] == 1&& TB_ADC[9] == 1&& TB_ADC[8] == 1)) {
		//      Actual = 100; out_line = -1;
		//    } else if ((data_line == 600 && TB_ADC[9] == 1&& TB_ADC[8] == 1&& TB_ADC[7] == 1)) {
		//      Actual = 200; out_line = -1;
		//    } else if ((data_line == 900 && TB_ADC[8] == 1&& TB_ADC[7] == 1&& TB_ADC[6] == 1) || (data_line == 1400 && TB_ADC[8] == 1&& TB_ADC[7] == 1&& TB_ADC[6] == 1&& TB_ADC[5] == 1)) {
		//      Actual = 300; out_line = -1;
		//    } else if ((data_line == 1200 && TB_ADC[7] == 1&& TB_ADC[6] == 1&& TB_ADC[5] == 1) || (data_line == 900 && TB_ADC[6] == 1&& TB_ADC[5] == 1) || (data_line == 1800 && TB_ADC[7] == 1&& TB_ADC[6] == 1&& TB_ADC[5] == 1&& TB_ADC[4] == 1)) {
		//      Actual = 400; out_line = -1;
		//    } else if ((data_line == 500 && TB_ADC[5] == 1) || (data_line == 1500 && TB_ADC[6] == 1&& TB_ADC[5] == 1&& TB_ADC[4] == 1)) {
		//      Actual = 500; out_line = 1; //Middle
		//    } else if ((data_line == 1800 && TB_ADC[5] == 1&& TB_ADC[4] == 1&& TB_ADC[3] == 1) || (data_line == 1100 && TB_ADC[4] == 1&& TB_ADC[5] == 1) || (data_line == 2200 && TB_ADC[6] == 1&& TB_ADC[5] == 1&& TB_ADC[4] == 1&& TB_ADC[3] == 1)) {
		//      Actual = 600; out_line = 1;
		//    } else if ((data_line == 2100 && TB_ADC[2] == 1&& TB_ADC[3] == 1&& TB_ADC[4] == 1) || (data_line == 2600 && TB_ADC[5] == 1&& TB_ADC[4] == 1&& TB_ADC[3] == 1&& TB_ADC[2] == 1)) {
		//      Actual = 700; out_line = 1;
		//    } else if ((data_line == 2400 && TB_ADC[3] == 1&& TB_ADC[2] == 1&& TB_ADC[1] == 1)) {
		//      Actual = 800; out_line = 1;
		//    } else if ((data_line == 2700 && TB_ADC[2] == 1&& TB_ADC[1] == 1&& TB_ADC[0] == 1)) {
		//      Actual = 900; out_line = 1;
		//    } else if ((data_line == 1000 && TB_ADC[0] == 1)) {
		//      Actual = 1000; out_line = 1;
		//    }
				Error = Target - Actual;
				ErrorChange = Error - ErrorOld;
				ErrorSlope = ErrorChange;
				ErrorArea = ErrorArea + Error;
				PWM_Value = kp * Error + ki * ErrorArea + kd * ErrorSlope;
				ErrorOld = Error;
				if (PWM_Value >= 1000 || PWM_Value <= -1000) PWM_Value = PWM_Value_old;
		//    left = 1000 + PWM_Value;
		//    right = 1000 - PWM_Value;
		//    left = MAP(left, 0, 1000, 0, 100);
		//    right = MAP(right, 0, 1000, 0, 100);
				left = 1000 + PWM_Value;
				right = 1000 - PWM_Value;
				left = MAP(left, 0, 1000, 0, max_speed);
				right = MAP(right, 0, 1000, 0, max_speed);
				//  left = constrain(left, 0, 255);
				//  right = constrain(right, 0, 255);
				TIM11->CCR1 = left;
				TIM10->CCR1 = right;
		//    analogWrite(dongcotrai, left);
		//    analogWrite(dongcophai, right);
				PWM_Value_old = PWM_Value;
			}
	}
	//delay(10);
}
void Line_config(void){
	//ADC1 CLOCK enable
	RCC->APB2ENR |= (1<<8);
	//GPIOA + GPIOB + GPIOC CLOCK enable
	RCC->AHB1ENR |= (1<<0) | (1<<1) | (1<<2);
	
	//Set the precaler in the Common Control Register (CCR)
	ADC->CCR |= (1<<16	);	//Precaler div by 4
	
	//Set the Scan Mode and Resolution in the Control Register 1 (CR1)
	ADC1->CR1 |= (1<<8); 	//Scan Mode Enable
	ADC1->CR1 &= ~(1<<24);	//12 bit RES
	
	//Set the Continuous Conversion, EOC, and Data Alignment in Control Reg 2 (CR2)
	ADC1->CR2 = (1<<1);     // enable continuous conversion mode
	ADC1->CR2 |= (1<<10);    // EOC after each conversion
	ADC1->CR2 &= ~(1<<11);   // Data Alignment RIGHT
	// Enable DMA for ADC
	ADC1->CR2 |= (1<<8);
	// Enable Continuous Request
	ADC1->CR2 |= (1<<9);
	
	//Set the Sampling Time for the channels in ADC_SMPRx
	ADC1->SMPR2 |= ((3<<3)|(3<<6)|(3<<9)|(3<<12)|(3<<15)|(3<<18)|(3<<21)|(3<<24)|(3<<27));
	ADC1->SMPR1 |= ((3<<0)|(3<<3));
	
//	ADC1->SMPR2 |= ((7<<3)|(7<<6)|(7<<9)|(7<<12)|(7<<15)|(7<<18)|(7<<21)|(7<<24)|(7<<27));
//	ADC1->SMPR1 |= ((7<<0)|(7<<3));
	//Set the Regular channel sequence length in ADC_SQR1
	ADC1->SQR1 |= (10<<20);	//SQR1_L = 10 for 11 conversions
	
	//Channel Sequence
	ADC1->SQR3 |= (1<<0);
	ADC1->SQR3 |= (2<<5);
	ADC1->SQR3 |= (3<<10);
	ADC1->SQR3 |= (4<<15);
	ADC1->SQR3 |= (5<<20);
	ADC1->SQR3 |= (6<<25);
	ADC1->SQR2 |= (7<<0);
	ADC1->SQR2 |= (8<<5);
	ADC1->SQR2 |= (9<<10);
	ADC1->SQR2 |= (10<<15);
	ADC1->SQR2 |= (11<<20);
	//Set the Respective GPIO PINs in the Ananlog Mode
	//GPIOA.P0->P7
	GPIOA->MODER |= (uint16_t)0xFFFF;
	//GPIOB.P0->P1
	GPIOB->MODER |= (uint8_t)0xF;
	//GPIOC.P0->P1
	GPIOC->MODER |= (uint8_t)0xF;
}
long MAP(long value, long in_min, long in_max, long out_min, long out_max){
	long kq = 0;
  kq = ((value * (out_min + out_max)) / (in_min + in_max));
  if (kq < out_min) {
    kq = out_min;
  }
  else if (kq > out_max) {
    kq = out_max;
  }
  return kq;
}
void filter(void){
//	static float x = 0;
//	_sin = sin(x)*1000;
//	x += 2*PI/1000;
//	_random = (float)rand()/1000000;
//	random_LPF_HPF = _random + _sin;
//	signal_LPF = LPF(random_LPF_HPF,1,1000);
//	signal_HPF = HPF(random_LPF_HPF,10,1000);
//	random_kalman = (float)rand()/1000000;
	
	kalman_signal((uint16_t*)RxData, (uint16_t*)RxData1, 500, 10);
//	RxData1[0] = kalman_signal1(RxData[0], 500, 10);
//	RxData1[1] = kalman_signal2(RxData[1], 500, 10);
//	RxData1[2] = kalman_signal3(RxData[2], 500, 10);
//	RxData1[3] = kalman_signal4(RxData[3], 500, 10);
//	RxData1[4] = kalman_signal5(RxData[4], 500, 10);
//	RxData1[5] = kalman_signal6(RxData[5], 500, 10);
//	RxData1[6] = kalman_signal7(RxData[6], 500, 10);
//	RxData1[7] = kalman_signal8(RxData[7], 500, 10);
//	RxData1[8] = kalman_signal9(RxData[8], 500, 10);
//	RxData1[9] = kalman_signal10(RxData[9], 500, 10);
//	RxData1[10] = kalman_signal11(RxData[10], 500, 10);

	//RxData[3] = kalman_signal4(RxData[3], 500, 10);
//	RxData[4] = kalman_signal5(RxData[4], 500, 10);
//	RxData[5] = kalman_signal6(RxData[5], 500, 10);
//	RxData[6] = kalman_signal7(RxData[6], 500, 10);
	//RxData[7] = kalman_signal8(RxData[7], 500, 10);

}
void ADC_READ(void){
	int i = 0, j = 0;
	for(i=0;i<11;i++) RxData[i] = 0;
	for(j = 0; j < 10; j++){
		for(i=0;i<11;i++){
			ADC1->SQR3 |= ((i+1)<<0);
			ADC1->SR = 0;
			ADC1->CR2 |= (uint32_t)ADC_CR2_SWSTART;
			while(!(ADC1->SR&ADC_SR_EOC)){}
			RxData[i]+= ADC1->DR;
		}
	}
	for(i=0;i<11;i++) RxData[i] = RxData[i]/10;
	
}